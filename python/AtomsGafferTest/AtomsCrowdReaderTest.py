##########################################################################
#
#  Copyright (c) 2018, Toolchefs Ltd. All rights reserved.
#
#  Redistribution and use in source and binary forms, with or without
#  modification, are permitted provided that the following conditions are
#  met:
#
#      * Redistributions of source code must retain the above
#        copyright notice, this list of conditions and the following
#        disclaimer.
#
#      * Redistributions in binary form must reproduce the above
#        copyright notice, this list of conditions and the following
#        disclaimer in the documentation and/or other materials provided with
#        the distribution.
#
#      * Neither the name of John Haddon nor the names of
#        any other contributors to this software may be used to endorse or
#        promote products derived from this software without specific prior
#        written permission.
#
#  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
#  IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
#  THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
#  PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
#  CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
#  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
#  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
#  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
#  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
#  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
##########################################################################

import unittest
import imath

import IECore
import IECoreScene

import Gaffer

import GafferTest
import GafferSceneTest

import AtomsGaffer
from six.moves import range

class AtomsCrowdReaderTest( GafferSceneTest.SceneTestCase ) :

	def testConstruct( self ) :

		a = AtomsGaffer.AtomsCrowdReader()
		self.assertEqual( a.getName(), "AtomsCrowdReader" )

	def testCompute( self ) :

		a = AtomsGaffer.AtomsCrowdReader()
		a["atomsSimFile"].setValue( "${ATOMS_GAFFER_ROOT}/examples/assets/atomsRobot/cache/test_sim.atoms" )

		self.assertEqual( a["out"].object( "/" ), IECore.NullObject() )
		self.assertEqual( a["out"].transform( "/" ), imath.M44f() )
		self.assertEqual( a["out"].bound( "/" ), imath.Box3f( imath.V3f( -436.2146, -0.5, -444.032959 ), imath.V3f( 435.620941, 0.5, 427.301819 ) ) )
		self.assertEqual( a["out"].childNames( "/" ), IECore.InternedStringVectorData( [ "crowd" ] ) )

		# expected result
		points = a["out"].object( "/crowd" )
		self.assertEqual( points.typeName(), IECoreScene.PointsPrimitive.staticTypeName() )

		points_data = IECore.V3fVectorData( [ imath.V3f( -369.383118, 0, -374.521057),
		imath.V3f( -214.829956, 0, -420.000275 ),
		imath.V3f( -12.1693974, 0, -359.299316 ),
		imath.V3f( 167.744232, 0, -443.532959 ),
		imath.V3f( 369.101105, 0, -433.318848 ),
		imath.V3f( -398.83609, 0, -189.862411 ),
		imath.V3f( -200.57753, 0, -218.673492 ),
		imath.V3f( -8.97942448, 0, -219.501678 ),
		imath.V3f( 161.277969, 0, -197.660416 ),
		imath.V3f( 435.120941, 0, -239.224579 ),
		imath.V3f( -423.55481, 0, 36.1987267 ),
		imath.V3f( -211.231369, 0, 1.12818277 ),
		imath.V3f( -5.61261654, 0, 38.7728806 ),
		imath.V3f( 212.598099, 0, 16.907526 ),
		imath.V3f( 429.628113, 0, -24.3928642 ),
		imath.V3f( -358.917847, 0, 214.157364 ),
		imath.V3f( -209.140701, 0, 216.579666 ),
		imath.V3f( 40.5227127, 0, 168.289398 ),
		imath.V3f( 210.763687, 0, 225.740189 ),
		imath.V3f( 371.877991, 0, 205.079941 ),
		imath.V3f( -435.7146, 0, 399.589966 ),
		imath.V3f( -183.399948, 0, 422.47937 ),
		imath.V3f( 7.60396528, 0, 368.715088 ),
		imath.V3f( 169.76918, 0, 361.707672 ),
		imath.V3f( 370.858948, 0, 426.801819 )])

		self.assertEqual( len(points["P"].data), 25 )
		for i in range(16):
			self.assertAlmostEqual( points["P"].data[i], points_data[i] )

		atype_data = IECore.StringVectorData( [ "atomsRobot", "atomsRobot", "atomsRobot", "atoms2Robot", "atoms2Robot",
												"atoms2Robot", "atoms2Robot", "atoms2Robot", "atoms2Robot", "atoms2Robot",
												"atomsRobot", "atomsRobot", "atoms2Robot", "atomsRobot", "atomsRobot",
												"atoms2Robot", "atoms2Robot", "atomsRobot", "atomsRobot", "atoms2Robot",
												"atomsRobot", "atomsRobot", "atoms2Robot", "atoms2Robot", "atomsRobot"] )
		variation_data = IECore.StringVectorData( [ "Robot1", "Robot2", "Robot2", "YellowRobot", "YellowRobot", "RedRobot",
													"RedRobot", "RedRobot", "RedRobot", "YellowRobot", "Robot1", "Robot2",
													"PurpleRobot", "Robot2", "Robot2", "PurpleRobot", "RedRobot", "Robot1",
													"Robot1", "PurpleRobot", "Robot2", "Robot2", "RedRobot", "RedRobot", "Robot1"] )

		hash_data = [ 10769842340941517053,
					  10635909613252844786,
					  1204183795096575231,
					  1976214636028365324,
					  8503173961726277873,
					  17744669312819809704,
					  14134325435890748850,
					  14026069780241187844,
					  8088673234230517803,
					  8503173961726277873,
					  2780829050624037871,
					  10635909613252844786,
					  11097458294646178325,
					  16125815950154960453,
					  2780829050624037871,
					  8871460619418102386,
					  8030240472914306735,
					  10635909613252844786,
					  2780829050624037871,
					  3406573713336803948,
					  15497718099511252579,
					  15497718099511252579,
					  1976214636028365324,
					  2445934192113912555,
					  17922934717707603983 ]

		root_matrix_data = [
			imath.M44d((-0.1468815524798304, -0.073988094352484643, -0.98638307539981818, 0), (-0.010986894614171733, 0.99725912066208944, -0.073167850884208324, 0), (0.9890930682639788, 9.027936913516553e-05, -0.14729186726287222, 0), (-369.38310545607612, 0, -374.52106986172549, 1)),
			imath.M44d((0.15603199270103441, 0.05146977838744967, -0.9864100968494246, 0), (-0.0097715044986471031, 0.99867302082046461, 0.050563971216280937, 0), (0.98770366758131301, 0.0017491135111210132, 0.15632787866643602, 0), (-214.82995198565999, 0, -420.00027602771308, 1)),
			imath.M44d((-0.050186977321988506, -0.042532445457798926, -0.99783378294717073, 0), (-0.046709879678596605, 0.99809949052051561, -0.040194454382390492, 0), (0.99764695882245491, 0.044591457770142499, -0.052078281905611805, 0), (-12.169397448734099, 0, -359.29932473427584, 1)),
			imath.M44d((0.15884537685513009, -0.017193716773049608, -0.98715374808348921, 0), (0.009626075068622203, 0.99982779729610638, -0.015865510795077933, 0), (0.9872565446379814, -0.0069822530420801492, 0.15898353126010067, 0), (167.74422998202232, 0, -443.53294855381034, 1)),
			imath.M44d((-0.091701855985978756, -0.06498738727250232, -0.99366362975818934, 0), (-0.04004215617458079, 0.99730170394043371, -0.061529968685170203, 0), (0.99498110300528697, 0.034146021920588999, -0.094056652339860256, 0), (369.10111803286759, 0, -433.31885978966898, 1)),
			imath.M44d((0.13942816714895501, -0.014158635240599772, -0.99013096065803685, 0), (-0.000773428733128102, 0.99989591200688199, -0.014407184316175934, 0), (0.99023188598099476, 0.0027745630375142385, 0.13940270365553528, 0), (-398.83608450360413, 0, -189.8624150663905, 1)),
			imath.M44d((0.051587709038575347, 0.14768082239485808, -0.98768875814850199, 0), (-0.093271432297592494, 0.98539525324835975, 0.1424662584360116, 0), (0.99430334817564936, 0.084773637248729716, 0.064608685440224439, 0), (-200.57753117083456, 0, -218.67348940282756, 1)),
			imath.M44d((-0.24789012273936645, 0.029431547507705227, -0.96834098904237442, 0), (0.01831648483387463, 0.99950214813040772, 0.025689730750457791, 0), (0.96861498720161865, -0.011368372530941551, -0.24830579267186945, 0), (-8.9794240118839888, 0, -219.50167285953728, 1)),
			imath.M44d((0.089832118676465469, 0.0046581255580663119, -0.99594602881902339, 0), (-0.039478812035238051, 0.99921978846684234, 0.0011125360960990184, 0), (0.99517416257375979, 0.039218824594371378, 0.08994592788476953, 0), (161.27797486087212, 0, -197.66041848001089, 1)),
			imath.M44d((-0.091701855985978756, -0.06498738727250232, -0.99366362975818934, 0), (-0.04004215617458079, 0.99730170394043371, -0.061529968685170203, 0), (0.99498110300528697, 0.034146021920588999, -0.094056652339860256, 0), (435.12093422940046, 0, -239.22458112902223, 1)),
			imath.M44d((-0.1682510534394499, -0.060776795302125611, -0.98386877385620852, 0), (0.0034019681887593046, 0.99805572937246501, -0.062234939376843247, 0), (0.98573830686899766, -0.013818184381466609, -0.16771716713396323, 0), (-423.55480412419644, 0, 36.198726613632743, 1)),
			imath.M44d((0.15603199270103441, 0.05146977838744967, -0.9864100968494246, 0), (-0.0097715044986471031, 0.99867302082046461, 0.050563971216280937, 0), (0.98770366758131301, 0.0017491135111210132, 0.15632787866643602, 0), (-211.23137212648587, 0, 1.1281827726066951, 1)),
			imath.M44d((-0.0086168091992160356, -0.017429040653413108, -0.99981097170471489, 0), (-0.047200481479786435, 0.99874070334162923, -0.017003588937167732, 0), (0.9988482693318842, 0.047045042571662185, -0.0094286171907573806, 0), (-5.6126163064560943, 0, 38.772881582273577, 1)),
			imath.M44d((-0.091701855985978756, -0.06498738727250232, -0.99366362975818934, 0), (-0.04004215617458079, 0.99730170394043371, -0.061529968685170203, 0), (0.99498110300528697, 0.034146021920588999, -0.094056652339860256, 0), (212.59809349086046, 0, 16.907525123985266, 1)),
			imath.M44d((-0.1682510534394499, -0.060776795302125611, -0.98386877385620852, 0), (0.0034019681887593046, 0.99805572937246501, -0.062234939376843247, 0), (0.98573830686899766, -0.013818184381466609, -0.16771716713396323, 0), (429.62809839967082, 0, -24.392864606060492, 1)),
			imath.M44d((0.025990211426369592, 0.0015596594140644821, -0.99966098071922616, 0), (-0.045480452929434236, 0.99896515801618935, 0.00037612633970047354, 0), (0.99862707619578683, 0.045455258575900971, 0.026034249680984771, 0), (-358.91785723805327, 0, 214.15736355779569, 1)),
			imath.M44d((-0.19760173007699872, -0.038057816117295758, -0.97954334202369975, 0), (0.017625818983478109, 0.99894661585651667, -0.042367312564937414, 0), (0.98012391399033705, -0.025637107894525502, -0.1967227793700207, 0), (-209.14070000133509, 0, 216.57966727464444, 1)),
			imath.M44d((0.15603199270103441, 0.05146977838744967, -0.9864100968494246, 0), (-0.0097715044986471031, 0.99867302082046461, 0.050563971216280937, 0), (0.98770366758131301, 0.0017491135111210132, 0.15632787866643602, 0), (40.522713673078783, 0, 168.28940132786028, 1)),
			imath.M44d((-0.1682510534394499, -0.060776795302125611, -0.98386877385620852, 0), (0.0034019681887593046, 0.99805572937246501, -0.062234939376843247, 0), (0.98573830686899766, -0.013818184381466609, -0.16771716713396323, 0), (210.76368355460636, 0, 225.74018882156358, 1)),
			imath.M44d((0.098603450985070923, 0.12236817659704334, -0.98757449785327545, 0), (-0.045926740804213918, 0.9919128291713103, 0.11832021722626124, 0), (0.99406644341962247, 0.033689296247946469, 0.10342599956191299, 0), (371.87797985825591, 0, 205.07993797775356, 1)),
			imath.M44d((-0.0086168091992160356, -0.017429040653413108, -0.99981097170471489, 0), (-0.047200481479786435, 0.99874070334162923, -0.017003588937167732, 0), (0.9988482693318842, 0.047045042571662185, -0.0094286171907573806, 0), (-435.71459304108964, 0, 399.5899659928819, 1)),
			imath.M44d((-0.0086168091992160356, -0.017429040653413108, -0.99981097170471489, 0), (-0.047200481479786435, 0.99874070334162923, -0.017003588937167732, 0), (0.9988482693318842, 0.047045042571662185, -0.0094286171907573806, 0), (-183.39994848165659, 0, 422.47937941806362, 1)),
			imath.M44d((0.15884537685513009, -0.017193716773049608, -0.98715374808348921, 0), (0.009626075068622203, 0.99982779729610638, -0.015865510795077933, 0), (0.9872565446379814, -0.0069822530420801492, 0.15898353126010067, 0), (7.6039650582726832, 0, 368.7150812678575, 1)),
			imath.M44d((-0.0029810396429967856, 0.093738379813803493, -0.99559240131317306, 0), (-0.11271580691600221, 0.98922059898531089, 0.093475950994987636, 0), (0.9936227957700654, 0.11249765638903741, 0.0076168912984673183, 0), (169.76917403040881, 0, 361.70768205388805, 1)),
			imath.M44d((-0.24789012273731392, 0.029431546753657147, -0.96834098906581767, 0), (0.018316485870333261, 0.99950214813824689, 0.025689729706471761, 0), (0.9686149871825448, -0.011368373793862886, -0.2483057926884544, 0), (370.85895907406649, 0, 426.80182466833008, 1))
		]

		pose_normal_matrix_data = [
			imath.M44d((0.97174459432828342, 0.21133736718785642, 0.10511403628376981, 2.3268797564691477), (-0.23015307871568461, 0.94718177486571253, 0.22332990332673947, 1.0766476457088761), (-0.052364145667168377, -0.24121194537655891, 0.96905871527797716, -2.0643397339867056), (0, 0, 0, 1)),
			imath.M44d((0.99831516934839604, -0.047460168280932413, -0.033381957336696799, -0.43504397432417641), (0.020168199268043138, 0.82325947138477973, -0.56730687155501469, -1.0903315588040163), (0.054406492141728567, 0.56567780158142933, 0.82282960472435185, 5.8729839983101968), (0, 0, 0, 1)),
			imath.M44d((0.98578343554014303, 0.1677658863193224, 0.0092534102991720726, 1.9025542291699631), (-0.16712317311404348, 0.98471381220288179, -0.04907701157529263, 1.3919786095147104), (-0.017345409276407747, 0.046832845785411498, 0.99875213207916291, 0.65543203833727504), (0, 0, 0, 1)),
			imath.M44d((0.9989478639399173, 0.022525407211311303, -0.039947104523873934, 0.084172312553904949), (-0.040249037093403606, 0.84813297645606323, -0.52825227804604169, -0.55429885935437739), (0.021981358987344726, 0.52930431726724425, 0.84814725111818068, 1.9648738007343027), (0, 0, 0, 1)),
			imath.M44d((0.98718981669022321, 0.15613581342877864, 0.032830985182555408, 0.80879791378202393), (-0.15077293249264717, 0.9802276650421432, -0.12814541549971842, 1.2981494700244443), (-0.052189928632746838, 0.12155382532426295, 0.9912118234254208, 1.0176512836870444), (0, 0, 0, 1)),
			imath.M44d((0.99857086312971477, 0.025507773461846333, -0.046963654046451586, 0.096648550841230654), (-0.044886267288901681, 0.87724906185247475, -0.47793232417134274, -0.35722830682521545), (0.029007831998357523, 0.47935731659376118, 0.87714030161131173, 1.699857268681884), (0, 0, 0, 1)),
			imath.M44d((0.97531701882629862, -0.21779367639979613, 0.036367943412330586, -0.6722112837047759), (0.21642523216773815, 0.91024062562225228, -0.3530185864058028, -2.666580859122341), (0.043781636206544371, 0.35217597588005839, 0.93490922037597113, 1.046178601880692), (0, 0, 0, 1)),
			imath.M44d((0.99340389672706597, -0.041271512456506128, 0.10698299036311226, -0.053248167484384407), (0.03100519293403222, 0.99490709358674578, 0.095909087900458004, -0.2674198231580267), (-0.11039644912135879, -0.091959433394985704, 0.98962421485686547, 0.66588420872384313), (0, 0, 0, 1)),
			imath.M44d((0.99554731242890671, 0.018642963466272634, -0.092401237160417482, 0.071221098383137102), (-0.053376377236137973, 0.91944529574483469, -0.38957837528004385, -0.045986164256645479), (0.077694987410552918, 0.39277574778222801, 0.91634638695494686, 0.88229345439562423), (0, 0, 0, 1)),
			imath.M44d((0.98718981669022321, 0.15613581342877864, 0.032830985182555408, 0.80879791378202393), (-0.15077293249264717, 0.9802276650421432, -0.12814541549971842, 1.2981494700244443), (-0.052189928632746838, 0.12155382532426295, 0.9912118234254208, 1.0176512836870444), (0, 0, 0, 1)),
			imath.M44d((0.976074057016455, 0.19217477728420271, 0.10172654616768444, 2.0897642763040905), (-0.2139419635671494, 0.93235572352924989, 0.29144749274488896, 0.65823691782737337), (-0.038836470546014724, -0.30623791368479619, 0.95116248284796812, -2.8477016083476903), (0, 0, 0, 1)),
			imath.M44d((0.99831516934839604, -0.047460168280932413, -0.033381957336696799, -0.43504397432417641), (0.020168199268043138, 0.82325947138477973, -0.56730687155501469, -1.0903315588040163), (0.054406492141728567, 0.56567780158142933, 0.82282960472435185, 5.8729839983101968), (0, 0, 0, 1)),
			imath.M44d((0.99460362661230439, 0.08630908280440612, -0.057570549373039473, 0.38875608754150076), (-0.09826629171980944, 0.96169109941207043, -0.25591788765781992, 0.64163941648813094), (0.033277046763327683, 0.26019410357858896, 0.96498272866494617, 0.77123115821366373), (0, 0, 0, 1)),
			imath.M44d((0.97805778556317979, 0.19916835281898176, 0.061114117310352149, 2.2169669120546125), (-0.20211474732604248, 0.97825713581221774, 0.046503818615326382, 1.4664153275506919), (-0.050523232404309643, -0.05783548623337386, 0.99704686926922848, -0.1684893739440278), (0, 0, 0, 1)),
			imath.M44d((0.976074057016455, 0.19217477728420271, 0.10172654616768444, 2.0897642763040905), (-0.2139419635671494, 0.93235572352924989, 0.29144749274488896, 0.65823691782737337), (-0.038836470546014724, -0.30623791368479619, 0.95116248284796812, -2.8477016083476903), (0, 0, 0, 1)),
			imath.M44d((0.99513725967576949, 0.048626471359064366, -0.08565804508723078, 0.20701530908936258), (-0.073392347652188578, 0.94605594929486636, -0.31558153322064003, 0.30183237719205913), (0.065691686773139565, 0.32033358719771454, 0.9450243357723358, 0.70449719600449323), (0, 0, 0, 1)),
			imath.M44d((0.98954785841908188, 0.11399635391717872, 0.088316856781689726, 0.63687711085483001), (-0.12412617551630727, 0.98507129666978088, 0.11927796539600641, 1.1994214205450136), (-0.073401147469934314, -0.12899368888013613, 0.988925123444233, 0.15055066225752881), (0, 0, 0, 1)),
			imath.M44d((0.99831516934839604, -0.047460168280932413, -0.033381957336696799, -0.43504397432417641), (0.020168199268043138, 0.82325947138477973, -0.56730687155501469, -1.0903315588040163), (0.054406492141728567, 0.56567780158142933, 0.82282960472435185, 5.8729839983101968), (0, 0, 0, 1)),
			imath.M44d((0.976074057016455, 0.19217477728420271, 0.10172654616768444, 2.0897642763040905), (-0.2139419635671494, 0.93235572352924989, 0.29144749274488896, 0.65823691782737337), (-0.038836470546014724, -0.30623791368479619, 0.95116248284796812, -2.8477016083476903), (0, 0, 0, 1)),
			imath.M44d((0.98572743608224744, -0.16483060533535426, 0.034238768954203733, -0.54751541624447131), (0.16001233411119647, 0.85412403235167211, -0.49484158100507941, -2.4411768453679947), (0.052320881940249198, 0.49325754824847878, 0.86830842239891559, 1.5295326146036023), (0, 0, 0, 1)),
			imath.M44d((0.99116619536844741, 0.12586192380018243, -0.041813266987326271, 1.4951382876066397), (-0.13075209269730459, 0.98013612084028479, -0.1491210075054307, 1.1951291858035014), (0.022214036420962164, 0.15327087381977153, 0.98793449976423631, 1.4636587876342204), (0, 0, 0, 1)),
			imath.M44d((0.99116619536844741, 0.12586192380018243, -0.041813266987326271, 1.4951382876066397), (-0.13075209269730459, 0.98013612084028479, -0.1491210075054307, 1.1951291858035014), (0.022214036420962164, 0.15327087381977153, 0.98793449976423631, 1.4636587876342204), (0, 0, 0, 1)),
			imath.M44d((0.9989478639399173, 0.022525407211311303, -0.039947104523873934, 0.084172312553904949), (-0.040249037093403606, 0.84813297645606323, -0.52825227804604169, -0.55429885935437739), (0.021981358987344726, 0.52930431726724425, 0.84814725111818068, 1.9648738007343027), (0, 0, 0, 1)),
			imath.M44d((0.98262018101763871, -0.18036669069057459, 0.043879798839478228, -0.57856617658414888), (0.18542727557989039, 0.96471905593537732, -0.18690604213393863, -2.042613543841505), (-0.0086200538212841023, 0.19179416050673939, 0.98139731743450009, 0.89214166579971477), (0, 0, 0, 1)),
			imath.M44d((0.99286360951675012, 0.012333955953241396, 0.1186158776383413, -0.0095090594512728666), (-0.046506701680303568, 0.95593234357730517, 0.28988011522286478, -0.56069518571295496), (-0.10981338532341903, -0.29332785076317874, 0.94968404870802425, -2.0824608177709285), (0, 0, 0, 1)),
		]

		pose_matrix_data = [
			imath.M44d((0.97174459432828275, 0.21133736718785634, 0.10511403628376978, 0), (-0.23015307871568447, 0.9471817748657122, 0.22332990332673941, 0), (-0.052364145667168342, -0.24121194537655888, 0.96905871527797705, 0), (-2.1214364411859172, -2.009481072615495, 1.5154310727318454, 1)),
			imath.M44d((0.99831516934839593, -0.047460168280932406, -0.033381957336696785, 0), (0.02016819926804312, 0.82325947138477928, -0.56730687155501447, 0), (0.054406492141728567, 0.56567780158142922, 0.82282960472435174, 0), (0.13677256529507353, -2.4452381543829187, -5.4655403068553081, 1)),
			imath.M44d((0.98578343554014314, 0.1677658863193224, 0.0092534102991720726, 0), (-0.16712317311404346, 0.98471381220288157, -0.049077011575292595, 0), (-0.017345409276407753, 0.046832845785411525, 0.99875213207916302, 0), (-1.6315058252457924, -1.7205800071816384, -0.60390511028956673, 1)),
			imath.M44d((0.99894786393991719, 0.022525407211311278, -0.0399471045238739, 0), (-0.040249037093403661, 0.84813297645606345, -0.52825227804604191, 0), (0.021981358987344733, 0.52930431726724403, 0.84814725111818046, 0), (-0.14958434355836125, -0.5717930597997305, -1.9559495078915958, 1)),
			imath.M44d((0.98718981669022332, 0.15613581342877866, 0.032830985182555408, 0), (-0.15077293249264717, 0.98022766504214331, -0.12814541549971836, 0), (-0.052189928632746838, 0.12155382532426295, 0.99121182342542058, 0), (-0.54960011396789987, -1.5224637504239191, -0.86890971362069291, 1)),
			imath.M44d((0.99857086312971544, 0.025507773461846347, -0.046963654046451614, 0), (-0.044886267288901723, 0.8772490618524752, -0.47793232417134318, 0), (0.029007831998357547, 0.47935731659376141, 0.87714030161131229, 0), (-0.16185424616819333, -0.50392611121845388, -1.65720530318278, 1)),
			imath.M44d((0.97531701882629851, -0.21779367639979608, 0.036367943412330607, 0), (0.21642523216773824, 0.9102406256222525, -0.3530185864058028, 0), (0.043781636206544433, 0.35217597588005856, 0.93490922037597135, 0), (1.186931075819329, 1.9123878926221858, -1.894987684555536, 1)),
			imath.M44d((0.99340389672706553, -0.041271512456506121, 0.10698299036311235, 0), (0.031005192934032207, 0.99490709358674567, 0.095909087900458101, 0), (-0.11039644912135878, -0.09195943339498569, 0.98962421485686647, 0), (0.13469959245306029, 0.32509458115892897, -0.62763049772949564, 1)),
			imath.M44d((0.99554731242890693, 0.018642963466272651, -0.092401237160417454, 0), (-0.053376377236137987, 0.9194452957448348, -0.38957837528004391, 0), (0.077694987410552974, 0.39277574778222812, 0.91634638695494708, 0), (-0.14190832676625398, -0.30558948125366925, -0.81982071672336931, 1)),
			imath.M44d((0.98718981669022332, 0.15613581342877866, 0.032830985182555408, 0), (-0.15077293249264717, 0.98022766504214331, -0.12814541549971836, 0), (-0.052189928632746838, 0.12155382532426295, 0.99121182342542058, 0), (-0.54960011396789987, -1.5224637504239191, -0.86890971362069291, 1)),
			imath.M44d((0.97607405701645422, 0.19217477728420257, 0.10172654616768444, 0), (-0.21394196356714926, 0.93235572352924923, 0.29144749274488901, 0), (-0.038836470546014711, -0.30623791368479619, 0.95116248284796867, 0), (-2.0095348763242455, -1.8873851414870604, 2.304200930740206, 1)),
			imath.M44d((0.99831516934839593, -0.047460168280932406, -0.033381957336696785, 0), (0.02016819926804312, 0.82325947138477928, -0.56730687155501447, 0), (0.054406492141728567, 0.56567780158142922, 0.82282960472435174, 0), (0.13677256529507353, -2.4452381543829187, -5.4655403068553081, 1)),
			imath.M44d((0.99460362661230461, 0.086309082804406051, -0.057570549373039438, 0), (-0.098266291719809537, 0.96169109941207032, -0.25591788765782014, 0), (0.033277046763327732, 0.26019410357858891, 0.96498272866494672, 0), (-0.34927098377404775, -0.85128189708220736, -0.55763684184693219, 1)),
			imath.M44d((0.97805778556317902, 0.19916835281898157, 0.061114117310352073, 0), (-0.20211474732604229, 0.97825713581221674, 0.046503818615326389, 0), (-0.050523232404309656, -0.05783548623337377, 0.99704686926922781, 0), (-1.8804502130654601, -1.8858255712361842, -0.035690085547601225, 1)),
			imath.M44d((0.97607405701645422, 0.19217477728420257, 0.10172654616768444, 0), (-0.21394196356714926, 0.93235572352924923, 0.29144749274488901, 0), (-0.038836470546014711, -0.30623791368479619, 0.95116248284796867, 0), (-2.0095348763242455, -1.8873851414870604, 2.304200930740206, 1)),
			imath.M44d((0.99513725967576983, 0.048626471359064428, -0.085658045087230877, 0), (-0.073392347652188508, 0.94605594929486614, -0.31558153322064009, 0), (0.065691686773139496, 0.32033358719771438, 0.94502433577233547, 0), (-0.23013606977103684, -0.52129085409753184, -0.55278174365799471, 1)),
			imath.M44d((0.98954785841908222, 0.11399635391717874, 0.08831685678168974, 0), (-0.12412617551630731, 0.98507129666978122, 0.11927796539600642, 0), (-0.073401147469934314, -0.12899368888013615, 0.988925123444233, 0), (-0.4702901959958794, -1.2346971972325989, -0.3481948635395371, 1)),
			imath.M44d((0.99831516934839593, -0.047460168280932406, -0.033381957336696785, 0), (0.02016819926804312, 0.82325947138477928, -0.56730687155501447, 0), (0.054406492141728567, 0.56567780158142922, 0.82282960472435174, 0), (0.13677256529507353, -2.4452381543829187, -5.4655403068553081, 1)),
			imath.M44d((0.97607405701645422, 0.19217477728420257, 0.10172654616768444, 0), (-0.21394196356714926, 0.93235572352924923, 0.29144749274488901, 0), (-0.038836470546014711, -0.30623791368479619, 0.95116248284796867, 0), (-2.0095348763242455, -1.8873851414870604, 2.304200930740206, 1)),
			imath.M44d((0.98572743608224755, -0.16483060533535426, 0.034238768954203767, 0), (0.16001233411119645, 0.85412403235167211, -0.49484158100507941, 0), (0.052320881940249246, 0.49325754824847889, 0.86830842239891604, 0), (0.8502928771232714, 1.2403670059137726, -2.5173556074333749, 1)),
			imath.M44d((0.99116619536844774, 0.12586192380018243, -0.041813266987326299, 0), (-0.13075209269730453, 0.98013612084028412, -0.14912100750543067, 0), (0.02221403642096216, 0.15327087381977145, 0.98793449976423631, 0), (-1.3581786556057036, -1.5839065266566177, -1.2052635274981087, 1)),
			imath.M44d((0.99116619536844774, 0.12586192380018243, -0.041813266987326299, 0), (-0.13075209269730453, 0.98013612084028412, -0.14912100750543067, 0), (0.02221403642096216, 0.15327087381977145, 0.98793449976423631, 0), (-1.3581786556057036, -1.5839065266566177, -1.2052635274981087, 1)),
			imath.M44d((0.99894786393991719, 0.022525407211311278, -0.0399471045238739, 0), (-0.040249037093403661, 0.84813297645606345, -0.52825227804604191, 0), (0.021981358987344733, 0.52930431726724403, 0.84814725111818046, 0), (-0.14958434355836125, -0.5717930597997305, -1.9559495078915958, 1)),
			imath.M44d((0.98262018101763915, -0.18036669069057454, 0.043879798839478248, 0), (0.18542727557989053, 0.96471905593537743, -0.18690604213393874, 0), (-0.0086200538212840988, 0.19179416050673936, 0.98139731743450043, 0), (0.95495737483831888, 1.6950865811944702, -1.2319348832321424, 1)),
			imath.M44d((0.99286360951675001, 0.012333955953241396, 0.11861587763834128, 0), (-0.04650670168030354, 0.95593234357730417, 0.28988011522286466, 0), (-0.10981338532341904, -0.29332785076317852, 0.94968404870802414, 0), (-0.24531695684843591, -0.074739808743752079, 2.1413421311682228, 1)),

		]

		self.assertEqual( points["atoms:agentType"].data, atype_data)
		self.assertEqual( points["atoms:variation"].data, variation_data)
		self.assertEqual( a["out"].transform( "/crowd" ), imath.M44f() )
		self.assertEqual( a["out"].childNames( "/crowd" ), IECore.InternedStringVectorData() )

		attributes = a["out"].attributes( "/crowd" )
		self.assertTrue( "atoms:agents" in  attributes )
		self.assertTrue( attributes["atoms:agents"].typeName(), IECore.BlindDataHolder.staticTypeName() )
		blind_data = attributes["atoms:agents"].blindData()
		for i in range( 25 ):
			self.assertTrue( str( i ) in blind_data )
			agent_data = blind_data[str( i )]

			self.assertTrue( "hash" in agent_data )
			self.assertEqual( hash_data[i], agent_data["hash"].value )

			self.assertTrue( "rootMatrix" in agent_data )
			self.assertAlmostEqual( agent_data["rootMatrix"].value, root_matrix_data[i] )

			self.assertTrue( "poseNormalWorldMatrices" in agent_data )
			self.assertEqual(  len(agent_data["poseNormalWorldMatrices"]), 68 )
			self.assertAlmostEqual( agent_data["poseNormalWorldMatrices"][2], pose_normal_matrix_data[i] )

			self.assertTrue( "poseWorldMatrices" in agent_data )
			self.assertEqual(  len(agent_data["poseWorldMatrices"]), 68 )
			self.assertAlmostEqual( agent_data["poseWorldMatrices"][2], pose_matrix_data[i] )

			self.assertTrue( "boundingBox" in agent_data )

	def testAffects( self ) :

		a = AtomsGaffer.AtomsCrowdReader()

		ss = GafferTest.CapturingSlot( a.plugDirtiedSignal() )

		a["name"].setValue( "army" )
		if Gaffer.About.compatibilityVersion() < 60 :
			self.assertEqual( len( ss ), 4 )
		else :
			self.assertEqual( len( ss ), 7 )

		del ss[:]

		a["atomsSimFile"].setValue( "${ATOMS_GAFFER_ROOT}/examples/assets/atomsRobot/cache/test_sim.atoms" )
		found = False
		for sss in ss :
			if sss[0].isSame( a["out"] ) :
				found = True
		self.assertTrue( found )

	def testEnabled( self ) :

		a = AtomsGaffer.AtomsCrowdReader()
		a["enabled"].setValue( False )

		self.assertSceneValid( a["out"] )
		self.assertTrue( a["out"].bound( "/" ).isEmpty() )
		self.assertEqual( a["out"].childNames( "/" ), IECore.InternedStringVectorData() )

		a["enabled"].setValue( True )
		self.assertSceneValid( a["out"] )
		self.assertEqual( a["out"].childNames( "/" ), IECore.InternedStringVectorData( [ "crowd" ] ) )

	def testChildNamesHash( self ) :

		s1 = AtomsGaffer.AtomsCrowdReader()
		s1["name"].setValue( "crowd1" )

		s2 = AtomsGaffer.AtomsCrowdReader()
		s2["name"].setValue( "crowd2" )

		self.assertNotEqual( s1["out"].childNamesHash( "/" ), s2["out"].childNamesHash( "/" ) )
		self.assertEqual( s1["out"].childNamesHash( "/crowd1" ), s2["out"].childNamesHash( "/crowd2" ) )

		self.assertNotEqual( s1["out"].childNames( "/" ), s2["out"].childNames( "/" ) )
		self.assertTrue( s1["out"].childNames( "/crowd1", _copy=False ).isSame( s2["out"].childNames( "crowd2", _copy=False ) ) )

	def testTransformAffectsBound( self ) :

		a = AtomsGaffer.AtomsCrowdReader()
		self.assertTrue( a["out"]["bound"] in a.affects( a["transform"]["translate"]["x"] ) )

if __name__ == "__main__":
	unittest.main()
